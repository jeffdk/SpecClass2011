

Break Sequence I) Added an additional ComputeItem that outputs Q.
DataBox must generate an error if Q is multiply defined, and it does:

#####################  REQUIRE  FAILED  ##########################
#### !KeyExists(key)  violated
#### DataBox.cpp (line 306)
[0] Inserting already existing item 'Q' into DataBox 'ApplyObservers/Sphere0'
Item already in DataBox was added from:
[EvaluateVectorFormula] added by ApplyObserversWork.cpp (line 453; ApplyObserversWork)
New item attempted to be added from:
[UnaryOp] added by ApplyObserversWork.cpp (line 453; ApplyObserversWork)
##################################################################

This telling me that a second ComputeItem, in this case the UnaryOp
that I added, is trying to add Q to the DataBox.  It also tells me
that the first ComputeItem to add Q was EvaluateVectorFormula.  Having
both gives me a good chance of tracking down what I did wrong.


====

Break Sequence II) Let's try making a circular dependence.  Replace
radius from EvaluateScalarFormula with a copy of divQ.  As Mark
mentioned in lecture, DataBox must check for these to prevent endless
recursion.  Here's the error:

#####################  REQUIRE  FAILED  ##########################
#### !mCurrentlyRecomputingMyself  violated
#### ItemBase.cpp (line 59)
[0] Cyclic dependency error encountered while recomputing 'divQ'
Accessing DataBox "ApplyObservers" through DataBoxAccess("NormOfTensor").
Get<>-sequence: *this -> Child -> divQ -> dQflattened -> dQ -> Q -> Radius
-> ** Recomputing divQ **
##################################################################

Actually, it appears the error is being generated by ItemBase.
Apparently RecomputeData knows when it has been called by itself.  Not
only that, it knows the whole chain that led to this call.


================
Results using EvaluateScalarFormula and EvaluateVectorFormula:

# NormOfTensor
# [1] = time 
# [2] = L2(divQ)
     0.00000000000000000 1.03962026175966679e-09

Results using my MinusFlatDerivInvRadius ComputeItem:

# NormOfTensor
# [1] = time 
# [2] = L2(divQ)
     0.00000000000000000 1.03962066802062965e-09
